/*
 * Copyright (c) 2022 Samsung Electronics Co., Ltd. All Rights Reserved
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import * as vscode from 'vscode';

/**
 * PathToHash is a data structure that stores the path of the actual data 
 * and the hash value generated by the contents of the actual data
 * to synchronize the actual data and metadata
 */


export class PathToHash {
  private static _instance: PathToHash;
  private _map: any;

  private constructor() {}

  public static async getInstance() {
    if (!this._instance) {
      this._instance = new PathToHash();
      this._instance._map = await this._instance.init();
      await this._instance.validateMetadata(this._instance._map);
    }
    return this._instance;
  }

  private async init() {
    // TO BE IMPLEMENT
  }

  public async validateMetadata(pathToHash: any) {
    // 1. Changing pathToHash, a tree structure, into a one-dimensional structure
    let flattenPathToHash = await this.getFlatMap(pathToHash);

    /**  2. Create metadata if pathToHash exists but does not have actual metadata files,
     *      If pathToHash exists and there is a actual metadata file, but there is no path inside, create
     *      a path and data insde
     */
    await this.createMetadata(flattenPathToHash);

    // 3. Replace is_deleted with true for all metadata not in pathToHash
    await this.deleteMetadata(flattenPathToHash);
  }

  public async getFlatMap(map: any) {
    // TO BE IMPLEMENTED
  }

  public async createMetadata(flattenMap: any) {
    // TO BE IMPLEMENTED
  }

  public async deleteMetadata(flattenMap: any) {
    // TO BE IMPLEMENTED
  }


  public get(uri: vscode.Uri) {
    // TO BE IMPLEMENTED
  }

  public getFilesUnderFolder(uri: vscode.Uri) {
    // TO BE IMPLEMENTED
  }

  public async addPath(uri: vscode.Uri) {
    // TO BE IMPLEMENTED
  }

  public deletePath(uri: vscode.Uri) {
    // TO BE IMPLEMENTED
  }

  public deleteEmptyPath(parent: any, paths: string[], idx: number) {
    // TO BE IMPLEMENTED
  }
}